// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hiit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HIITServiceClient is the client API for HIITService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HIITServiceClient interface {
	Sub(ctx context.Context, in *RoutineChange, opts ...grpc.CallOption) (HIITService_SubClient, error)
	Pub(ctx context.Context, in *DataSession, opts ...grpc.CallOption) (*Empty, error)
	CreateWaitingRoom(ctx context.Context, in *CreateWaitingRoomRequest, opts ...grpc.CallOption) (HIITService_CreateWaitingRoomClient, error)
	JoinWaitingRoom(ctx context.Context, in *WaitingRoomRequest, opts ...grpc.CallOption) (HIITService_JoinWaitingRoomClient, error)
	StartWaitingRoom(ctx context.Context, in *StartWaitingRoomRequest, opts ...grpc.CallOption) (*Empty, error)
	NotifyInvites(ctx context.Context, in *InviteWaitingRoomRequest, opts ...grpc.CallOption) (*Empty, error)
	SubInvites(ctx context.Context, in *WorkoutUser, opts ...grpc.CallOption) (HIITService_SubInvitesClient, error)
	CreateDuoHIIT(ctx context.Context, in *CreateDuoHIITRequest, opts ...grpc.CallOption) (HIITService_CreateDuoHIITClient, error)
	JoinDuoHIIT(ctx context.Context, in *JoinDuoHIITRequest, opts ...grpc.CallOption) (HIITService_JoinDuoHIITClient, error)
	HIITIntervalComplete(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error)
	HIITRoutineComplete(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error)
	DuoHIITSelectRoutine(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error)
}

type hIITServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHIITServiceClient(cc grpc.ClientConnInterface) HIITServiceClient {
	return &hIITServiceClient{cc}
}

func (c *hIITServiceClient) Sub(ctx context.Context, in *RoutineChange, opts ...grpc.CallOption) (HIITService_SubClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[0], "/hiit.HIITService/Sub", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceSubClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_SubClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type hIITServiceSubClient struct {
	grpc.ClientStream
}

func (x *hIITServiceSubClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) Pub(ctx context.Context, in *DataSession, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/Pub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIITServiceClient) CreateWaitingRoom(ctx context.Context, in *CreateWaitingRoomRequest, opts ...grpc.CallOption) (HIITService_CreateWaitingRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[1], "/hiit.HIITService/CreateWaitingRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceCreateWaitingRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_CreateWaitingRoomClient interface {
	Recv() (*WaitingRoomResponse, error)
	grpc.ClientStream
}

type hIITServiceCreateWaitingRoomClient struct {
	grpc.ClientStream
}

func (x *hIITServiceCreateWaitingRoomClient) Recv() (*WaitingRoomResponse, error) {
	m := new(WaitingRoomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) JoinWaitingRoom(ctx context.Context, in *WaitingRoomRequest, opts ...grpc.CallOption) (HIITService_JoinWaitingRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[2], "/hiit.HIITService/JoinWaitingRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceJoinWaitingRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_JoinWaitingRoomClient interface {
	Recv() (*WaitingRoomResponse, error)
	grpc.ClientStream
}

type hIITServiceJoinWaitingRoomClient struct {
	grpc.ClientStream
}

func (x *hIITServiceJoinWaitingRoomClient) Recv() (*WaitingRoomResponse, error) {
	m := new(WaitingRoomResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) StartWaitingRoom(ctx context.Context, in *StartWaitingRoomRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/StartWaitingRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIITServiceClient) NotifyInvites(ctx context.Context, in *InviteWaitingRoomRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/NotifyInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIITServiceClient) SubInvites(ctx context.Context, in *WorkoutUser, opts ...grpc.CallOption) (HIITService_SubInvitesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[3], "/hiit.HIITService/SubInvites", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceSubInvitesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_SubInvitesClient interface {
	Recv() (*InviteWaitingRoomRequest, error)
	grpc.ClientStream
}

type hIITServiceSubInvitesClient struct {
	grpc.ClientStream
}

func (x *hIITServiceSubInvitesClient) Recv() (*InviteWaitingRoomRequest, error) {
	m := new(InviteWaitingRoomRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) CreateDuoHIIT(ctx context.Context, in *CreateDuoHIITRequest, opts ...grpc.CallOption) (HIITService_CreateDuoHIITClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[4], "/hiit.HIITService/CreateDuoHIIT", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceCreateDuoHIITClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_CreateDuoHIITClient interface {
	Recv() (*HIITActivity, error)
	grpc.ClientStream
}

type hIITServiceCreateDuoHIITClient struct {
	grpc.ClientStream
}

func (x *hIITServiceCreateDuoHIITClient) Recv() (*HIITActivity, error) {
	m := new(HIITActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) JoinDuoHIIT(ctx context.Context, in *JoinDuoHIITRequest, opts ...grpc.CallOption) (HIITService_JoinDuoHIITClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[5], "/hiit.HIITService/JoinDuoHIIT", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceJoinDuoHIITClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_JoinDuoHIITClient interface {
	Recv() (*HIITActivity, error)
	grpc.ClientStream
}

type hIITServiceJoinDuoHIITClient struct {
	grpc.ClientStream
}

func (x *hIITServiceJoinDuoHIITClient) Recv() (*HIITActivity, error) {
	m := new(HIITActivity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hIITServiceClient) HIITIntervalComplete(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/HIITIntervalComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIITServiceClient) HIITRoutineComplete(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/HIITRoutineComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hIITServiceClient) DuoHIITSelectRoutine(ctx context.Context, in *HIITRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/hiit.HIITService/DuoHIITSelectRoutine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HIITServiceServer is the server API for HIITService service.
// All implementations must embed UnimplementedHIITServiceServer
// for forward compatibility
type HIITServiceServer interface {
	Sub(*RoutineChange, HIITService_SubServer) error
	Pub(context.Context, *DataSession) (*Empty, error)
	CreateWaitingRoom(*CreateWaitingRoomRequest, HIITService_CreateWaitingRoomServer) error
	JoinWaitingRoom(*WaitingRoomRequest, HIITService_JoinWaitingRoomServer) error
	StartWaitingRoom(context.Context, *StartWaitingRoomRequest) (*Empty, error)
	NotifyInvites(context.Context, *InviteWaitingRoomRequest) (*Empty, error)
	SubInvites(*WorkoutUser, HIITService_SubInvitesServer) error
	CreateDuoHIIT(*CreateDuoHIITRequest, HIITService_CreateDuoHIITServer) error
	JoinDuoHIIT(*JoinDuoHIITRequest, HIITService_JoinDuoHIITServer) error
	HIITIntervalComplete(context.Context, *HIITRequest) (*Empty, error)
	HIITRoutineComplete(context.Context, *HIITRequest) (*Empty, error)
	DuoHIITSelectRoutine(context.Context, *HIITRequest) (*Empty, error)
	mustEmbedUnimplementedHIITServiceServer()
}

// UnimplementedHIITServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHIITServiceServer struct {
}

func (UnimplementedHIITServiceServer) Sub(*RoutineChange, HIITService_SubServer) error {
	return status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedHIITServiceServer) Pub(context.Context, *DataSession) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pub not implemented")
}
func (UnimplementedHIITServiceServer) CreateWaitingRoom(*CreateWaitingRoomRequest, HIITService_CreateWaitingRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateWaitingRoom not implemented")
}
func (UnimplementedHIITServiceServer) JoinWaitingRoom(*WaitingRoomRequest, HIITService_JoinWaitingRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinWaitingRoom not implemented")
}
func (UnimplementedHIITServiceServer) StartWaitingRoom(context.Context, *StartWaitingRoomRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWaitingRoom not implemented")
}
func (UnimplementedHIITServiceServer) NotifyInvites(context.Context, *InviteWaitingRoomRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyInvites not implemented")
}
func (UnimplementedHIITServiceServer) SubInvites(*WorkoutUser, HIITService_SubInvitesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubInvites not implemented")
}
func (UnimplementedHIITServiceServer) CreateDuoHIIT(*CreateDuoHIITRequest, HIITService_CreateDuoHIITServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateDuoHIIT not implemented")
}
func (UnimplementedHIITServiceServer) JoinDuoHIIT(*JoinDuoHIITRequest, HIITService_JoinDuoHIITServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinDuoHIIT not implemented")
}
func (UnimplementedHIITServiceServer) HIITIntervalComplete(context.Context, *HIITRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HIITIntervalComplete not implemented")
}
func (UnimplementedHIITServiceServer) HIITRoutineComplete(context.Context, *HIITRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HIITRoutineComplete not implemented")
}
func (UnimplementedHIITServiceServer) DuoHIITSelectRoutine(context.Context, *HIITRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuoHIITSelectRoutine not implemented")
}
func (UnimplementedHIITServiceServer) mustEmbedUnimplementedHIITServiceServer() {}

// UnsafeHIITServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HIITServiceServer will
// result in compilation errors.
type UnsafeHIITServiceServer interface {
	mustEmbedUnimplementedHIITServiceServer()
}

func RegisterHIITServiceServer(s *grpc.Server, srv HIITServiceServer) {
	s.RegisterService(&_HIITService_serviceDesc, srv)
}

func _HIITService_Sub_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RoutineChange)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).Sub(m, &hIITServiceSubServer{stream})
}

type HIITService_SubServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type hIITServiceSubServer struct {
	grpc.ServerStream
}

func (x *hIITServiceSubServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_Pub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataSession)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).Pub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/Pub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).Pub(ctx, req.(*DataSession))
	}
	return interceptor(ctx, in, info, handler)
}

func _HIITService_CreateWaitingRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateWaitingRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).CreateWaitingRoom(m, &hIITServiceCreateWaitingRoomServer{stream})
}

type HIITService_CreateWaitingRoomServer interface {
	Send(*WaitingRoomResponse) error
	grpc.ServerStream
}

type hIITServiceCreateWaitingRoomServer struct {
	grpc.ServerStream
}

func (x *hIITServiceCreateWaitingRoomServer) Send(m *WaitingRoomResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_JoinWaitingRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitingRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).JoinWaitingRoom(m, &hIITServiceJoinWaitingRoomServer{stream})
}

type HIITService_JoinWaitingRoomServer interface {
	Send(*WaitingRoomResponse) error
	grpc.ServerStream
}

type hIITServiceJoinWaitingRoomServer struct {
	grpc.ServerStream
}

func (x *hIITServiceJoinWaitingRoomServer) Send(m *WaitingRoomResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_StartWaitingRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWaitingRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).StartWaitingRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/StartWaitingRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).StartWaitingRoom(ctx, req.(*StartWaitingRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HIITService_NotifyInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteWaitingRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).NotifyInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/NotifyInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).NotifyInvites(ctx, req.(*InviteWaitingRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HIITService_SubInvites_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkoutUser)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).SubInvites(m, &hIITServiceSubInvitesServer{stream})
}

type HIITService_SubInvitesServer interface {
	Send(*InviteWaitingRoomRequest) error
	grpc.ServerStream
}

type hIITServiceSubInvitesServer struct {
	grpc.ServerStream
}

func (x *hIITServiceSubInvitesServer) Send(m *InviteWaitingRoomRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_CreateDuoHIIT_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateDuoHIITRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).CreateDuoHIIT(m, &hIITServiceCreateDuoHIITServer{stream})
}

type HIITService_CreateDuoHIITServer interface {
	Send(*HIITActivity) error
	grpc.ServerStream
}

type hIITServiceCreateDuoHIITServer struct {
	grpc.ServerStream
}

func (x *hIITServiceCreateDuoHIITServer) Send(m *HIITActivity) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_JoinDuoHIIT_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinDuoHIITRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).JoinDuoHIIT(m, &hIITServiceJoinDuoHIITServer{stream})
}

type HIITService_JoinDuoHIITServer interface {
	Send(*HIITActivity) error
	grpc.ServerStream
}

type hIITServiceJoinDuoHIITServer struct {
	grpc.ServerStream
}

func (x *hIITServiceJoinDuoHIITServer) Send(m *HIITActivity) error {
	return x.ServerStream.SendMsg(m)
}

func _HIITService_HIITIntervalComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIITRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).HIITIntervalComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/HIITIntervalComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).HIITIntervalComplete(ctx, req.(*HIITRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HIITService_HIITRoutineComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIITRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).HIITRoutineComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/HIITRoutineComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).HIITRoutineComplete(ctx, req.(*HIITRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HIITService_DuoHIITSelectRoutine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HIITRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HIITServiceServer).DuoHIITSelectRoutine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hiit.HIITService/DuoHIITSelectRoutine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HIITServiceServer).DuoHIITSelectRoutine(ctx, req.(*HIITRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HIITService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiit.HIITService",
	HandlerType: (*HIITServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pub",
			Handler:    _HIITService_Pub_Handler,
		},
		{
			MethodName: "StartWaitingRoom",
			Handler:    _HIITService_StartWaitingRoom_Handler,
		},
		{
			MethodName: "NotifyInvites",
			Handler:    _HIITService_NotifyInvites_Handler,
		},
		{
			MethodName: "HIITIntervalComplete",
			Handler:    _HIITService_HIITIntervalComplete_Handler,
		},
		{
			MethodName: "HIITRoutineComplete",
			Handler:    _HIITService_HIITRoutineComplete_Handler,
		},
		{
			MethodName: "DuoHIITSelectRoutine",
			Handler:    _HIITService_DuoHIITSelectRoutine_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sub",
			Handler:       _HIITService_Sub_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateWaitingRoom",
			Handler:       _HIITService_CreateWaitingRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinWaitingRoom",
			Handler:       _HIITService_JoinWaitingRoom_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubInvites",
			Handler:       _HIITService_SubInvites_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateDuoHIIT",
			Handler:       _HIITService_CreateDuoHIIT_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "JoinDuoHIIT",
			Handler:       _HIITService_JoinDuoHIIT_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hiit.proto",
}
