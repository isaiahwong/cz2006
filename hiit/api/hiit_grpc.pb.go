// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hiit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HIITServiceClient is the client API for HIITService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HIITServiceClient interface {
	Join(ctx context.Context, in *Session, opts ...grpc.CallOption) (HIITService_JoinClient, error)
}

type hIITServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHIITServiceClient(cc grpc.ClientConnInterface) HIITServiceClient {
	return &hIITServiceClient{cc}
}

func (c *hIITServiceClient) Join(ctx context.Context, in *Session, opts ...grpc.CallOption) (HIITService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HIITService_serviceDesc.Streams[0], "/hiit.HIITService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &hIITServiceJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HIITService_JoinClient interface {
	Recv() (*Empty, error)
	grpc.ClientStream
}

type hIITServiceJoinClient struct {
	grpc.ClientStream
}

func (x *hIITServiceJoinClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HIITServiceServer is the server API for HIITService service.
// All implementations must embed UnimplementedHIITServiceServer
// for forward compatibility
type HIITServiceServer interface {
	Join(*Session, HIITService_JoinServer) error
	mustEmbedUnimplementedHIITServiceServer()
}

// UnimplementedHIITServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHIITServiceServer struct {
}

func (UnimplementedHIITServiceServer) Join(*Session, HIITService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedHIITServiceServer) mustEmbedUnimplementedHIITServiceServer() {}

// UnsafeHIITServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HIITServiceServer will
// result in compilation errors.
type UnsafeHIITServiceServer interface {
	mustEmbedUnimplementedHIITServiceServer()
}

func RegisterHIITServiceServer(s *grpc.Server, srv HIITServiceServer) {
	s.RegisterService(&_HIITService_serviceDesc, srv)
}

func _HIITService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HIITServiceServer).Join(m, &hIITServiceJoinServer{stream})
}

type HIITService_JoinServer interface {
	Send(*Empty) error
	grpc.ServerStream
}

type hIITServiceJoinServer struct {
	grpc.ServerStream
}

func (x *hIITServiceJoinServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

var _HIITService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hiit.HIITService",
	HandlerType: (*HIITServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _HIITService_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hiit.proto",
}
